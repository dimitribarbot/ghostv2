# Converted using fumihwh/onnx-pytorch

import torch
import torch.nn as nn


class Landmark(nn.Module):
  def __init__(self):
    super(Landmark, self).__init__()
    self._vars = nn.ParameterDict()
    self._regularizer_params = []
    
    self._vars["downsample_layers_0_0_weight"] = torch.empty(96, 3, 4, 4)
    self._vars["downsample_layers_0_0_bias"] = torch.empty(96)
    self._vars["stages_0_0_dwconv_weight"] = torch.empty(96, 1, 7, 7)
    self._vars["stages_0_0_dwconv_bias"] = torch.empty(96)
    self._vars["stages_0_1_dwconv_weight"] = torch.empty(96, 1, 7, 7)
    self._vars["stages_0_1_dwconv_bias"] = torch.empty(96)
    self._vars["stages_0_2_dwconv_weight"] = torch.empty(96, 1, 7, 7)
    self._vars["stages_0_2_dwconv_bias"] = torch.empty(96)
    self._vars["downsample_layers_1_1_weight"] = torch.empty(192, 96, 2, 2)
    self._vars["downsample_layers_1_1_bias"] = torch.empty(192)
    self._vars["stages_1_0_dwconv_weight"] = torch.empty(192, 1, 7, 7)
    self._vars["stages_1_0_dwconv_bias"] = torch.empty(192)
    self._vars["stages_1_1_dwconv_weight"] = torch.empty(192, 1, 7, 7)
    self._vars["stages_1_1_dwconv_bias"] = torch.empty(192)
    self._vars["stages_1_2_dwconv_weight"] = torch.empty(192, 1, 7, 7)
    self._vars["stages_1_2_dwconv_bias"] = torch.empty(192)
    self._vars["downsample_layers_2_1_weight"] = torch.empty(384, 192, 2, 2)
    self._vars["downsample_layers_2_1_bias"] = torch.empty(384)
    self._vars["stages_2_0_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_0_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_1_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_1_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_2_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_2_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_3_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_3_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_4_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_4_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_5_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_5_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_6_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_6_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_7_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_7_dwconv_bias"] = torch.empty(384)
    self._vars["stages_2_8_dwconv_weight"] = torch.empty(384, 1, 7, 7)
    self._vars["stages_2_8_dwconv_bias"] = torch.empty(384)
    self._vars["downsample_layers_3_1_weight"] = torch.empty(768, 384, 2, 2)
    self._vars["downsample_layers_3_1_bias"] = torch.empty(768)
    self._vars["stages_3_0_dwconv_weight"] = torch.empty(768, 1, 7, 7)
    self._vars["stages_3_0_dwconv_bias"] = torch.empty(768)
    self._vars["stages_3_1_dwconv_weight"] = torch.empty(768, 1, 7, 7)
    self._vars["stages_3_1_dwconv_bias"] = torch.empty(768)
    self._vars["stages_3_2_dwconv_weight"] = torch.empty(768, 1, 7, 7)
    self._vars["stages_3_2_dwconv_bias"] = torch.empty(768)
    self._vars["fc_coeff_bias"] = torch.empty(214)
    self._vars["fc_coeff_weight"] = torch.empty(214, 768)
    self._vars["fc_lmk_bias"] = torch.empty(262)
    self._vars["fc_lmk_weight"] = torch.empty(262, 768)
    self._vars["fc_pts_bias"] = torch.empty(406)
    self._vars["fc_pts_weight"] = torch.empty(406, 1152)
    self._vars["norm_bias"] = torch.empty(768)
    self._vars["norm_s3_bias"] = torch.empty(384)
    self._vars["norm_s3_weight"] = torch.empty(384)
    self._vars["norm_weight"] = torch.empty(768)
    self._vars["onnx__Add_197"] = torch.empty(())
    self._vars["onnx__Add_218"] = torch.empty(())
    self._vars["onnx__Add_230"] = torch.empty(())
    self._vars["onnx__Add_248"] = torch.empty(())
    self._vars["onnx__Add_260"] = torch.empty(())
    self._vars["onnx__Add_278"] = torch.empty(())
    self._vars["onnx__Add_290"] = torch.empty(())
    self._vars["onnx__Add_306"] = torch.empty(())
    self._vars["onnx__Add_328"] = torch.empty(())
    self._vars["onnx__Add_340"] = torch.empty(())
    self._vars["onnx__Add_358"] = torch.empty(())
    self._vars["onnx__Add_370"] = torch.empty(())
    self._vars["onnx__Add_388"] = torch.empty(())
    self._vars["onnx__Add_400"] = torch.empty(())
    self._vars["onnx__Add_416"] = torch.empty(())
    self._vars["onnx__Add_438"] = torch.empty(())
    self._vars["onnx__Add_450"] = torch.empty(())
    self._vars["onnx__Add_468"] = torch.empty(())
    self._vars["onnx__Add_480"] = torch.empty(())
    self._vars["onnx__Add_498"] = torch.empty(())
    self._vars["onnx__Add_510"] = torch.empty(())
    self._vars["onnx__Add_528"] = torch.empty(())
    self._vars["onnx__Add_540"] = torch.empty(())
    self._vars["onnx__Add_558"] = torch.empty(())
    self._vars["onnx__Add_570"] = torch.empty(())
    self._vars["onnx__Add_588"] = torch.empty(())
    self._vars["onnx__Add_600"] = torch.empty(())
    self._vars["onnx__Add_618"] = torch.empty(())
    self._vars["onnx__Add_630"] = torch.empty(())
    self._vars["onnx__Add_648"] = torch.empty(())
    self._vars["onnx__Add_660"] = torch.empty(())
    self._vars["onnx__Add_678"] = torch.empty(())
    self._vars["onnx__Add_690"] = torch.empty(())
    self._vars["onnx__Add_707"] = torch.empty(())
    self._vars["onnx__Add_718"] = torch.empty(())
    self._vars["onnx__Add_740"] = torch.empty(())
    self._vars["onnx__Add_752"] = torch.empty(())
    self._vars["onnx__Add_770"] = torch.empty(())
    self._vars["onnx__Add_782"] = torch.empty(())
    self._vars["onnx__Add_800"] = torch.empty(())
    self._vars["onnx__Add_812"] = torch.empty(())
    self._vars["onnx__Add_829"] = torch.empty(())
    self._vars["onnx__Add_860"] = torch.empty(96, 1, 1)
    self._vars["onnx__Add_870"] = torch.empty(96, 1, 1)
    self._vars["onnx__Add_880"] = torch.empty(192, 1, 1)
    self._vars["onnx__Add_902"] = torch.empty(384, 1, 1)
    self._vars["onnx__Div_227"] = torch.empty(())
    self._vars["onnx__Div_257"] = torch.empty(())
    self._vars["onnx__Div_287"] = torch.empty(())
    self._vars["onnx__Div_337"] = torch.empty(())
    self._vars["onnx__Div_367"] = torch.empty(())
    self._vars["onnx__Div_397"] = torch.empty(())
    self._vars["onnx__Div_447"] = torch.empty(())
    self._vars["onnx__Div_477"] = torch.empty(())
    self._vars["onnx__Div_507"] = torch.empty(())
    self._vars["onnx__Div_537"] = torch.empty(())
    self._vars["onnx__Div_567"] = torch.empty(())
    self._vars["onnx__Div_597"] = torch.empty(())
    self._vars["onnx__Div_627"] = torch.empty(())
    self._vars["onnx__Div_657"] = torch.empty(())
    self._vars["onnx__Div_687"] = torch.empty(())
    self._vars["onnx__Div_749"] = torch.empty(())
    self._vars["onnx__Div_779"] = torch.empty(())
    self._vars["onnx__Div_809"] = torch.empty(())
    self._vars["onnx__MatMul_861"] = torch.empty(96, 384)
    self._vars["onnx__MatMul_862"] = torch.empty(384, 96)
    self._vars["onnx__MatMul_863"] = torch.empty(96, 384)
    self._vars["onnx__MatMul_864"] = torch.empty(384, 96)
    self._vars["onnx__MatMul_865"] = torch.empty(96, 384)
    self._vars["onnx__MatMul_866"] = torch.empty(384, 96)
    self._vars["onnx__MatMul_871"] = torch.empty(192, 768)
    self._vars["onnx__MatMul_872"] = torch.empty(768, 192)
    self._vars["onnx__MatMul_873"] = torch.empty(192, 768)
    self._vars["onnx__MatMul_874"] = torch.empty(768, 192)
    self._vars["onnx__MatMul_875"] = torch.empty(192, 768)
    self._vars["onnx__MatMul_876"] = torch.empty(768, 192)
    self._vars["onnx__MatMul_881"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_882"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_883"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_884"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_885"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_886"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_887"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_888"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_889"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_890"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_891"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_892"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_893"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_894"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_895"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_896"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_897"] = torch.empty(384, 1536)
    self._vars["onnx__MatMul_898"] = torch.empty(1536, 384)
    self._vars["onnx__MatMul_903"] = torch.empty(768, 3072)
    self._vars["onnx__MatMul_904"] = torch.empty(3072, 768)
    self._vars["onnx__MatMul_905"] = torch.empty(768, 3072)
    self._vars["onnx__MatMul_906"] = torch.empty(3072, 768)
    self._vars["onnx__MatMul_907"] = torch.empty(768, 3072)
    self._vars["onnx__MatMul_908"] = torch.empty(3072, 768)
    self._vars["onnx__Mul_233"] = torch.empty(())
    self._vars["onnx__Mul_263"] = torch.empty(())
    self._vars["onnx__Mul_293"] = torch.empty(())
    self._vars["onnx__Mul_343"] = torch.empty(())
    self._vars["onnx__Mul_373"] = torch.empty(())
    self._vars["onnx__Mul_403"] = torch.empty(())
    self._vars["onnx__Mul_453"] = torch.empty(())
    self._vars["onnx__Mul_483"] = torch.empty(())
    self._vars["onnx__Mul_513"] = torch.empty(())
    self._vars["onnx__Mul_543"] = torch.empty(())
    self._vars["onnx__Mul_573"] = torch.empty(())
    self._vars["onnx__Mul_603"] = torch.empty(())
    self._vars["onnx__Mul_633"] = torch.empty(())
    self._vars["onnx__Mul_663"] = torch.empty(())
    self._vars["onnx__Mul_693"] = torch.empty(())
    self._vars["onnx__Mul_755"] = torch.empty(())
    self._vars["onnx__Mul_785"] = torch.empty(())
    self._vars["onnx__Mul_815"] = torch.empty(())
    self._vars["onnx__Mul_858"] = torch.empty(96, 1, 1)
    self._vars["onnx__Mul_868"] = torch.empty(96, 1, 1)
    self._vars["onnx__Mul_878"] = torch.empty(192, 1, 1)
    self._vars["onnx__Mul_900"] = torch.empty(384, 1, 1)
    self._vars["onnx__Pow_194"] = torch.empty(())
    self._vars["onnx__Pow_215"] = torch.empty(())
    self._vars["onnx__Pow_245"] = torch.empty(())
    self._vars["onnx__Pow_275"] = torch.empty(())
    self._vars["onnx__Pow_303"] = torch.empty(())
    self._vars["onnx__Pow_325"] = torch.empty(())
    self._vars["onnx__Pow_355"] = torch.empty(())
    self._vars["onnx__Pow_385"] = torch.empty(())
    self._vars["onnx__Pow_413"] = torch.empty(())
    self._vars["onnx__Pow_435"] = torch.empty(())
    self._vars["onnx__Pow_465"] = torch.empty(())
    self._vars["onnx__Pow_495"] = torch.empty(())
    self._vars["onnx__Pow_525"] = torch.empty(())
    self._vars["onnx__Pow_555"] = torch.empty(())
    self._vars["onnx__Pow_585"] = torch.empty(())
    self._vars["onnx__Pow_615"] = torch.empty(())
    self._vars["onnx__Pow_645"] = torch.empty(())
    self._vars["onnx__Pow_675"] = torch.empty(())
    self._vars["onnx__Pow_704"] = torch.empty(())
    self._vars["onnx__Pow_715"] = torch.empty(())
    self._vars["onnx__Pow_737"] = torch.empty(())
    self._vars["onnx__Pow_767"] = torch.empty(())
    self._vars["onnx__Pow_797"] = torch.empty(())
    self._vars["onnx__Pow_826"] = torch.empty(())
    self._vars["onnx__Reshape_911"] = torch.empty(2)
    self._vars["stages_0_0_gamma"] = torch.empty(96)
    self._vars["stages_0_0_norm_bias"] = torch.empty(96)
    self._vars["stages_0_0_norm_weight"] = torch.empty(96)
    self._vars["stages_0_0_pwconv1_bias"] = torch.empty(384)
    self._vars["stages_0_0_pwconv2_bias"] = torch.empty(96)
    self._vars["stages_0_1_gamma"] = torch.empty(96)
    self._vars["stages_0_1_norm_bias"] = torch.empty(96)
    self._vars["stages_0_1_norm_weight"] = torch.empty(96)
    self._vars["stages_0_1_pwconv1_bias"] = torch.empty(384)
    self._vars["stages_0_1_pwconv2_bias"] = torch.empty(96)
    self._vars["stages_0_2_gamma"] = torch.empty(96)
    self._vars["stages_0_2_norm_bias"] = torch.empty(96)
    self._vars["stages_0_2_norm_weight"] = torch.empty(96)
    self._vars["stages_0_2_pwconv1_bias"] = torch.empty(384)
    self._vars["stages_0_2_pwconv2_bias"] = torch.empty(96)
    self._vars["stages_1_0_gamma"] = torch.empty(192)
    self._vars["stages_1_0_norm_bias"] = torch.empty(192)
    self._vars["stages_1_0_norm_weight"] = torch.empty(192)
    self._vars["stages_1_0_pwconv1_bias"] = torch.empty(768)
    self._vars["stages_1_0_pwconv2_bias"] = torch.empty(192)
    self._vars["stages_1_1_gamma"] = torch.empty(192)
    self._vars["stages_1_1_norm_bias"] = torch.empty(192)
    self._vars["stages_1_1_norm_weight"] = torch.empty(192)
    self._vars["stages_1_1_pwconv1_bias"] = torch.empty(768)
    self._vars["stages_1_1_pwconv2_bias"] = torch.empty(192)
    self._vars["stages_1_2_gamma"] = torch.empty(192)
    self._vars["stages_1_2_norm_bias"] = torch.empty(192)
    self._vars["stages_1_2_norm_weight"] = torch.empty(192)
    self._vars["stages_1_2_pwconv1_bias"] = torch.empty(768)
    self._vars["stages_1_2_pwconv2_bias"] = torch.empty(192)
    self._vars["stages_2_0_gamma"] = torch.empty(384)
    self._vars["stages_2_0_norm_bias"] = torch.empty(384)
    self._vars["stages_2_0_norm_weight"] = torch.empty(384)
    self._vars["stages_2_0_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_0_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_1_gamma"] = torch.empty(384)
    self._vars["stages_2_1_norm_bias"] = torch.empty(384)
    self._vars["stages_2_1_norm_weight"] = torch.empty(384)
    self._vars["stages_2_1_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_1_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_2_gamma"] = torch.empty(384)
    self._vars["stages_2_2_norm_bias"] = torch.empty(384)
    self._vars["stages_2_2_norm_weight"] = torch.empty(384)
    self._vars["stages_2_2_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_2_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_3_gamma"] = torch.empty(384)
    self._vars["stages_2_3_norm_bias"] = torch.empty(384)
    self._vars["stages_2_3_norm_weight"] = torch.empty(384)
    self._vars["stages_2_3_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_3_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_4_gamma"] = torch.empty(384)
    self._vars["stages_2_4_norm_bias"] = torch.empty(384)
    self._vars["stages_2_4_norm_weight"] = torch.empty(384)
    self._vars["stages_2_4_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_4_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_5_gamma"] = torch.empty(384)
    self._vars["stages_2_5_norm_bias"] = torch.empty(384)
    self._vars["stages_2_5_norm_weight"] = torch.empty(384)
    self._vars["stages_2_5_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_5_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_6_gamma"] = torch.empty(384)
    self._vars["stages_2_6_norm_bias"] = torch.empty(384)
    self._vars["stages_2_6_norm_weight"] = torch.empty(384)
    self._vars["stages_2_6_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_6_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_7_gamma"] = torch.empty(384)
    self._vars["stages_2_7_norm_bias"] = torch.empty(384)
    self._vars["stages_2_7_norm_weight"] = torch.empty(384)
    self._vars["stages_2_7_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_7_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_2_8_gamma"] = torch.empty(384)
    self._vars["stages_2_8_norm_bias"] = torch.empty(384)
    self._vars["stages_2_8_norm_weight"] = torch.empty(384)
    self._vars["stages_2_8_pwconv1_bias"] = torch.empty(1536)
    self._vars["stages_2_8_pwconv2_bias"] = torch.empty(384)
    self._vars["stages_3_0_gamma"] = torch.empty(768)
    self._vars["stages_3_0_norm_bias"] = torch.empty(768)
    self._vars["stages_3_0_norm_weight"] = torch.empty(768)
    self._vars["stages_3_0_pwconv1_bias"] = torch.empty(3072)
    self._vars["stages_3_0_pwconv2_bias"] = torch.empty(768)
    self._vars["stages_3_1_gamma"] = torch.empty(768)
    self._vars["stages_3_1_norm_bias"] = torch.empty(768)
    self._vars["stages_3_1_norm_weight"] = torch.empty(768)
    self._vars["stages_3_1_pwconv1_bias"] = torch.empty(3072)
    self._vars["stages_3_1_pwconv2_bias"] = torch.empty(768)
    self._vars["stages_3_2_gamma"] = torch.empty(768)
    self._vars["stages_3_2_norm_bias"] = torch.empty(768)
    self._vars["stages_3_2_norm_weight"] = torch.empty(768)
    self._vars["stages_3_2_pwconv1_bias"] = torch.empty(3072)
    self._vars["stages_3_2_pwconv2_bias"] = torch.empty(768)
    
    self.n_Identity_0 = nn.Identity()
    self.n_Identity_1 = nn.Identity()
    self.n_Conv_2 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 96, 'padding': [0, 0], 'kernel_size': (4, 4), 'stride': [4, 4], 'in_channels': 3, 'bias': True})
    self.n_Conv_2.weight.data = self._vars["downsample_layers_0_0_weight"]
    self.n_Conv_2.bias.data = self._vars["downsample_layers_0_0_bias"]
    self.n_Conv_14 = nn.Conv2d(**{'groups': 96, 'dilation': [1, 1], 'out_channels': 96, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 96, 'bias': True})
    self.n_Conv_14.weight.data = self._vars["stages_0_0_dwconv_weight"]
    self.n_Conv_14.bias.data = self._vars["stages_0_0_dwconv_bias"]
    self.n_Conv_42 = nn.Conv2d(**{'groups': 96, 'dilation': [1, 1], 'out_channels': 96, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 96, 'bias': True})
    self.n_Conv_42.weight.data = self._vars["stages_0_1_dwconv_weight"]
    self.n_Conv_42.bias.data = self._vars["stages_0_1_dwconv_bias"]
    self.n_Conv_70 = nn.Conv2d(**{'groups': 96, 'dilation': [1, 1], 'out_channels': 96, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 96, 'bias': True})
    self.n_Conv_70.weight.data = self._vars["stages_0_2_dwconv_weight"]
    self.n_Conv_70.bias.data = self._vars["stages_0_2_dwconv_bias"]
    self.n_Conv_109 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 192, 'padding': [0, 0], 'kernel_size': (2, 2), 'stride': [2, 2], 'in_channels': 96, 'bias': True})
    self.n_Conv_109.weight.data = self._vars["downsample_layers_1_1_weight"]
    self.n_Conv_109.bias.data = self._vars["downsample_layers_1_1_bias"]
    self.n_Conv_110 = nn.Conv2d(**{'groups': 192, 'dilation': [1, 1], 'out_channels': 192, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 192, 'bias': True})
    self.n_Conv_110.weight.data = self._vars["stages_1_0_dwconv_weight"]
    self.n_Conv_110.bias.data = self._vars["stages_1_0_dwconv_bias"]
    self.n_Conv_138 = nn.Conv2d(**{'groups': 192, 'dilation': [1, 1], 'out_channels': 192, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 192, 'bias': True})
    self.n_Conv_138.weight.data = self._vars["stages_1_1_dwconv_weight"]
    self.n_Conv_138.bias.data = self._vars["stages_1_1_dwconv_bias"]
    self.n_Conv_166 = nn.Conv2d(**{'groups': 192, 'dilation': [1, 1], 'out_channels': 192, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 192, 'bias': True})
    self.n_Conv_166.weight.data = self._vars["stages_1_2_dwconv_weight"]
    self.n_Conv_166.bias.data = self._vars["stages_1_2_dwconv_bias"]
    self.n_Conv_205 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 384, 'padding': [0, 0], 'kernel_size': (2, 2), 'stride': [2, 2], 'in_channels': 192, 'bias': True})
    self.n_Conv_205.weight.data = self._vars["downsample_layers_2_1_weight"]
    self.n_Conv_205.bias.data = self._vars["downsample_layers_2_1_bias"]
    self.n_Conv_206 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_206.weight.data = self._vars["stages_2_0_dwconv_weight"]
    self.n_Conv_206.bias.data = self._vars["stages_2_0_dwconv_bias"]
    self.n_Conv_234 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_234.weight.data = self._vars["stages_2_1_dwconv_weight"]
    self.n_Conv_234.bias.data = self._vars["stages_2_1_dwconv_bias"]
    self.n_Conv_262 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_262.weight.data = self._vars["stages_2_2_dwconv_weight"]
    self.n_Conv_262.bias.data = self._vars["stages_2_2_dwconv_bias"]
    self.n_Conv_290 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_290.weight.data = self._vars["stages_2_3_dwconv_weight"]
    self.n_Conv_290.bias.data = self._vars["stages_2_3_dwconv_bias"]
    self.n_Conv_318 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_318.weight.data = self._vars["stages_2_4_dwconv_weight"]
    self.n_Conv_318.bias.data = self._vars["stages_2_4_dwconv_bias"]
    self.n_Conv_346 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_346.weight.data = self._vars["stages_2_5_dwconv_weight"]
    self.n_Conv_346.bias.data = self._vars["stages_2_5_dwconv_bias"]
    self.n_Conv_374 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_374.weight.data = self._vars["stages_2_6_dwconv_weight"]
    self.n_Conv_374.bias.data = self._vars["stages_2_6_dwconv_bias"]
    self.n_Conv_402 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_402.weight.data = self._vars["stages_2_7_dwconv_weight"]
    self.n_Conv_402.bias.data = self._vars["stages_2_7_dwconv_bias"]
    self.n_Conv_430 = nn.Conv2d(**{'groups': 384, 'dilation': [1, 1], 'out_channels': 384, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 384, 'bias': True})
    self.n_Conv_430.weight.data = self._vars["stages_2_8_dwconv_weight"]
    self.n_Conv_430.bias.data = self._vars["stages_2_8_dwconv_bias"]
    self.n_Conv_481 = nn.Conv2d(**{'groups': 1, 'dilation': [1, 1], 'out_channels': 768, 'padding': [0, 0], 'kernel_size': (2, 2), 'stride': [2, 2], 'in_channels': 384, 'bias': True})
    self.n_Conv_481.weight.data = self._vars["downsample_layers_3_1_weight"]
    self.n_Conv_481.bias.data = self._vars["downsample_layers_3_1_bias"]
    self.n_Conv_482 = nn.Conv2d(**{'groups': 768, 'dilation': [1, 1], 'out_channels': 768, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 768, 'bias': True})
    self.n_Conv_482.weight.data = self._vars["stages_3_0_dwconv_weight"]
    self.n_Conv_482.bias.data = self._vars["stages_3_0_dwconv_bias"]
    self.n_Conv_510 = nn.Conv2d(**{'groups': 768, 'dilation': [1, 1], 'out_channels': 768, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 768, 'bias': True})
    self.n_Conv_510.weight.data = self._vars["stages_3_1_dwconv_weight"]
    self.n_Conv_510.bias.data = self._vars["stages_3_1_dwconv_bias"]
    self.n_Conv_538 = nn.Conv2d(**{'groups': 768, 'dilation': [1, 1], 'out_channels': 768, 'padding': [3, 3], 'kernel_size': (7, 7), 'stride': [1, 1], 'in_channels': 768, 'bias': True})
    self.n_Conv_538.weight.data = self._vars["stages_3_2_dwconv_weight"]
    self.n_Conv_538.bias.data = self._vars["stages_3_2_dwconv_bias"]

  def forward(self, *inputs):
    input, = inputs
    onnx__Reshape_917 = self.n_Identity_0(self._vars["onnx__Reshape_911"])
    onnx__Reshape_914 = self.n_Identity_1(self._vars["onnx__Reshape_911"])
    x0 = self.n_Conv_2(input)
    u = torch.mean(x0, [1], **{'keepdim': True})
    onnx__Pow_193 = torch.sub(x0, u)
    onnx__Pow_194 = self._vars['onnx__Pow_194']
    onnx__ReduceMean_195 = torch.pow(onnx__Pow_193, self._vars["onnx__Pow_194"])
    s = torch.mean(onnx__ReduceMean_195, [1], **{'keepdim': True})
    onnx__Add_197 = self._vars['onnx__Add_197']
    onnx__Sqrt_198 = torch.add(s, self._vars["onnx__Add_197"])
    onnx__Div_199 = torch.sqrt(onnx__Sqrt_198)
    x = torch.div(onnx__Pow_193, onnx__Div_199)
    onnx__Add_205 = torch.mul(self._vars["onnx__Mul_858"], x)
    onnx__Conv_210 = torch.add(onnx__Add_205, self._vars["onnx__Add_860"])
    x_3 = self.n_Conv_14(onnx__Conv_210)
    input_1 = x_3.permute(*[0, 2, 3, 1])
    onnx__Sub_213 = torch.mean(input_1, [-1], **{'keepdim': True})
    onnx__Pow_214 = torch.sub(input_1, onnx__Sub_213)
    onnx__Pow_215 = self._vars['onnx__Pow_215']
    onnx__ReduceMean_216 = torch.pow(onnx__Pow_214, self._vars["onnx__Pow_215"])
    onnx__Add_217 = torch.mean(onnx__ReduceMean_216, [-1], **{'keepdim': True})
    onnx__Add_218 = self._vars['onnx__Add_218']
    onnx__Sqrt_219 = torch.add(onnx__Add_217, self._vars["onnx__Add_218"])
    onnx__Div_220 = torch.sqrt(onnx__Sqrt_219)
    onnx__Mul_221 = torch.div(onnx__Pow_214, onnx__Div_220)
    onnx__Add_222 = torch.mul(onnx__Mul_221, self._vars["stages_0_0_norm_weight"])
    input0 = torch.add(onnx__Add_222, self._vars["stages_0_0_norm_bias"])
    onnx__Add_225 = torch.matmul(input0, self._vars["onnx__MatMul_861"])
    input_3 = torch.add(self._vars["stages_0_0_pwconv1_bias"], onnx__Add_225)
    onnx__Div_227 = self._vars['onnx__Div_227']
    onnx__Erf_228 = torch.div(input_3, self._vars["onnx__Div_227"])
    onnx__Add_229 = torch.erf(onnx__Erf_228)
    onnx__Add_230 = self._vars['onnx__Add_230']
    onnx__Mul_231 = torch.add(onnx__Add_229, self._vars["onnx__Add_230"])
    onnx__Mul_232 = torch.mul(input_3, onnx__Mul_231)
    onnx__Mul_233 = self._vars['onnx__Mul_233']
    onnx__MatMul_234 = torch.mul(onnx__Mul_232, self._vars["onnx__Mul_233"])
    onnx__Add_236 = torch.matmul(onnx__MatMul_234, self._vars["onnx__MatMul_862"])
    x_8 = torch.add(self._vars["stages_0_0_pwconv2_bias"], onnx__Add_236)
    x_12 = torch.mul(self._vars["stages_0_0_gamma"], x_8)
    x0_3 = x_12.permute(*[0, 3, 1, 2])
    onnx__Conv_240 = torch.add(onnx__Conv_210, x0_3)
    x_16 = self.n_Conv_42(onnx__Conv_240)
    input_7 = x_16.permute(*[0, 2, 3, 1])
    onnx__Sub_243 = torch.mean(input_7, [-1], **{'keepdim': True})
    onnx__Pow_244 = torch.sub(input_7, onnx__Sub_243)
    onnx__Pow_245 = self._vars['onnx__Pow_245']
    onnx__ReduceMean_246 = torch.pow(onnx__Pow_244, self._vars["onnx__Pow_245"])
    onnx__Add_247 = torch.mean(onnx__ReduceMean_246, [-1], **{'keepdim': True})
    onnx__Add_248 = self._vars['onnx__Add_248']
    onnx__Sqrt_249 = torch.add(onnx__Add_247, self._vars["onnx__Add_248"])
    onnx__Div_250 = torch.sqrt(onnx__Sqrt_249)
    onnx__Mul_251 = torch.div(onnx__Pow_244, onnx__Div_250)
    onnx__Add_252 = torch.mul(onnx__Mul_251, self._vars["stages_0_1_norm_weight"])
    input0_3 = torch.add(onnx__Add_252, self._vars["stages_0_1_norm_bias"])
    onnx__Add_255 = torch.matmul(input0_3, self._vars["onnx__MatMul_863"])
    input_11 = torch.add(self._vars["stages_0_1_pwconv1_bias"], onnx__Add_255)
    onnx__Div_257 = self._vars['onnx__Div_257']
    onnx__Erf_258 = torch.div(input_11, self._vars["onnx__Div_257"])
    onnx__Add_259 = torch.erf(onnx__Erf_258)
    onnx__Add_260 = self._vars['onnx__Add_260']
    onnx__Mul_261 = torch.add(onnx__Add_259, self._vars["onnx__Add_260"])
    onnx__Mul_262 = torch.mul(input_11, onnx__Mul_261)
    onnx__Mul_263 = self._vars['onnx__Mul_263']
    onnx__MatMul_264 = torch.mul(onnx__Mul_262, self._vars["onnx__Mul_263"])
    onnx__Add_266 = torch.matmul(onnx__MatMul_264, self._vars["onnx__MatMul_864"])
    x_20 = torch.add(self._vars["stages_0_1_pwconv2_bias"], onnx__Add_266)
    x_24 = torch.mul(self._vars["stages_0_1_gamma"], x_20)
    x0_7 = x_24.permute(*[0, 3, 1, 2])
    onnx__Conv_270 = torch.add(onnx__Conv_240, x0_7)
    x_28 = self.n_Conv_70(onnx__Conv_270)
    input_15 = x_28.permute(*[0, 2, 3, 1])
    onnx__Sub_273 = torch.mean(input_15, [-1], **{'keepdim': True})
    onnx__Pow_274 = torch.sub(input_15, onnx__Sub_273)
    onnx__Pow_275 = self._vars['onnx__Pow_275']
    onnx__ReduceMean_276 = torch.pow(onnx__Pow_274, self._vars["onnx__Pow_275"])
    onnx__Add_277 = torch.mean(onnx__ReduceMean_276, [-1], **{'keepdim': True})
    onnx__Add_278 = self._vars['onnx__Add_278']
    onnx__Sqrt_279 = torch.add(onnx__Add_277, self._vars["onnx__Add_278"])
    onnx__Div_280 = torch.sqrt(onnx__Sqrt_279)
    onnx__Mul_281 = torch.div(onnx__Pow_274, onnx__Div_280)
    onnx__Add_282 = torch.mul(onnx__Mul_281, self._vars["stages_0_2_norm_weight"])
    input0_7 = torch.add(onnx__Add_282, self._vars["stages_0_2_norm_bias"])
    onnx__Add_285 = torch.matmul(input0_7, self._vars["onnx__MatMul_865"])
    input_19 = torch.add(self._vars["stages_0_2_pwconv1_bias"], onnx__Add_285)
    onnx__Div_287 = self._vars['onnx__Div_287']
    onnx__Erf_288 = torch.div(input_19, self._vars["onnx__Div_287"])
    onnx__Add_289 = torch.erf(onnx__Erf_288)
    onnx__Add_290 = self._vars['onnx__Add_290']
    onnx__Mul_291 = torch.add(onnx__Add_289, self._vars["onnx__Add_290"])
    onnx__Mul_292 = torch.mul(input_19, onnx__Mul_291)
    onnx__Mul_293 = self._vars['onnx__Mul_293']
    onnx__MatMul_294 = torch.mul(onnx__Mul_292, self._vars["onnx__Mul_293"])
    onnx__Add_296 = torch.matmul(onnx__MatMul_294, self._vars["onnx__MatMul_866"])
    x_32 = torch.add(self._vars["stages_0_2_pwconv2_bias"], onnx__Add_296)
    x_36 = torch.mul(self._vars["stages_0_2_gamma"], x_32)
    x0_11 = x_36.permute(*[0, 3, 1, 2])
    onnx__ReduceMean_300 = torch.add(onnx__Conv_270, x0_11)
    u_3 = torch.mean(onnx__ReduceMean_300, [1], **{'keepdim': True})
    onnx__Pow_302 = torch.sub(onnx__ReduceMean_300, u_3)
    onnx__Pow_303 = self._vars['onnx__Pow_303']
    onnx__ReduceMean_304 = torch.pow(onnx__Pow_302, self._vars["onnx__Pow_303"])
    s_3 = torch.mean(onnx__ReduceMean_304, [1], **{'keepdim': True})
    onnx__Add_306 = self._vars['onnx__Add_306']
    onnx__Sqrt_307 = torch.add(s_3, self._vars["onnx__Add_306"])
    onnx__Div_308 = torch.sqrt(onnx__Sqrt_307)
    x_40 = torch.div(onnx__Pow_302, onnx__Div_308)
    onnx__Add_314 = torch.mul(self._vars["onnx__Mul_868"], x_40)
    onnx__Conv_319 = torch.add(onnx__Add_314, self._vars["onnx__Add_870"])
    input_23 = self.n_Conv_109(onnx__Conv_319)
    x_44 = self.n_Conv_110(input_23)
    input_27 = x_44.permute(*[0, 2, 3, 1])
    onnx__Sub_323 = torch.mean(input_27, [-1], **{'keepdim': True})
    onnx__Pow_324 = torch.sub(input_27, onnx__Sub_323)
    onnx__Pow_325 = self._vars['onnx__Pow_325']
    onnx__ReduceMean_326 = torch.pow(onnx__Pow_324, self._vars["onnx__Pow_325"])
    onnx__Add_327 = torch.mean(onnx__ReduceMean_326, [-1], **{'keepdim': True})
    onnx__Add_328 = self._vars['onnx__Add_328']
    onnx__Sqrt_329 = torch.add(onnx__Add_327, self._vars["onnx__Add_328"])
    onnx__Div_330 = torch.sqrt(onnx__Sqrt_329)
    onnx__Mul_331 = torch.div(onnx__Pow_324, onnx__Div_330)
    onnx__Add_332 = torch.mul(onnx__Mul_331, self._vars["stages_1_0_norm_weight"])
    input0_11 = torch.add(onnx__Add_332, self._vars["stages_1_0_norm_bias"])
    onnx__Add_335 = torch.matmul(input0_11, self._vars["onnx__MatMul_871"])
    input_31 = torch.add(self._vars["stages_1_0_pwconv1_bias"], onnx__Add_335)
    onnx__Div_337 = self._vars['onnx__Div_337']
    onnx__Erf_338 = torch.div(input_31, self._vars["onnx__Div_337"])
    onnx__Add_339 = torch.erf(onnx__Erf_338)
    onnx__Add_340 = self._vars['onnx__Add_340']
    onnx__Mul_341 = torch.add(onnx__Add_339, self._vars["onnx__Add_340"])
    onnx__Mul_342 = torch.mul(input_31, onnx__Mul_341)
    onnx__Mul_343 = self._vars['onnx__Mul_343']
    onnx__MatMul_344 = torch.mul(onnx__Mul_342, self._vars["onnx__Mul_343"])
    onnx__Add_346 = torch.matmul(onnx__MatMul_344, self._vars["onnx__MatMul_872"])
    x_48 = torch.add(self._vars["stages_1_0_pwconv2_bias"], onnx__Add_346)
    x_52 = torch.mul(self._vars["stages_1_0_gamma"], x_48)
    x0_15 = x_52.permute(*[0, 3, 1, 2])
    onnx__Conv_350 = torch.add(input_23, x0_15)
    x_56 = self.n_Conv_138(onnx__Conv_350)
    input_35 = x_56.permute(*[0, 2, 3, 1])
    onnx__Sub_353 = torch.mean(input_35, [-1], **{'keepdim': True})
    onnx__Pow_354 = torch.sub(input_35, onnx__Sub_353)
    onnx__Pow_355 = self._vars['onnx__Pow_355']
    onnx__ReduceMean_356 = torch.pow(onnx__Pow_354, self._vars["onnx__Pow_355"])
    onnx__Add_357 = torch.mean(onnx__ReduceMean_356, [-1], **{'keepdim': True})
    onnx__Add_358 = self._vars['onnx__Add_358']
    onnx__Sqrt_359 = torch.add(onnx__Add_357, self._vars["onnx__Add_358"])
    onnx__Div_360 = torch.sqrt(onnx__Sqrt_359)
    onnx__Mul_361 = torch.div(onnx__Pow_354, onnx__Div_360)
    onnx__Add_362 = torch.mul(onnx__Mul_361, self._vars["stages_1_1_norm_weight"])
    input0_15 = torch.add(onnx__Add_362, self._vars["stages_1_1_norm_bias"])
    onnx__Add_365 = torch.matmul(input0_15, self._vars["onnx__MatMul_873"])
    input_39 = torch.add(self._vars["stages_1_1_pwconv1_bias"], onnx__Add_365)
    onnx__Div_367 = self._vars['onnx__Div_367']
    onnx__Erf_368 = torch.div(input_39, self._vars["onnx__Div_367"])
    onnx__Add_369 = torch.erf(onnx__Erf_368)
    onnx__Add_370 = self._vars['onnx__Add_370']
    onnx__Mul_371 = torch.add(onnx__Add_369, self._vars["onnx__Add_370"])
    onnx__Mul_372 = torch.mul(input_39, onnx__Mul_371)
    onnx__Mul_373 = self._vars['onnx__Mul_373']
    onnx__MatMul_374 = torch.mul(onnx__Mul_372, self._vars["onnx__Mul_373"])
    onnx__Add_376 = torch.matmul(onnx__MatMul_374, self._vars["onnx__MatMul_874"])
    x_60 = torch.add(self._vars["stages_1_1_pwconv2_bias"], onnx__Add_376)
    x_64 = torch.mul(self._vars["stages_1_1_gamma"], x_60)
    x0_19 = x_64.permute(*[0, 3, 1, 2])
    onnx__Conv_380 = torch.add(onnx__Conv_350, x0_19)
    x_68 = self.n_Conv_166(onnx__Conv_380)
    input_43 = x_68.permute(*[0, 2, 3, 1])
    onnx__Sub_383 = torch.mean(input_43, [-1], **{'keepdim': True})
    onnx__Pow_384 = torch.sub(input_43, onnx__Sub_383)
    onnx__Pow_385 = self._vars['onnx__Pow_385']
    onnx__ReduceMean_386 = torch.pow(onnx__Pow_384, self._vars["onnx__Pow_385"])
    onnx__Add_387 = torch.mean(onnx__ReduceMean_386, [-1], **{'keepdim': True})
    onnx__Add_388 = self._vars['onnx__Add_388']
    onnx__Sqrt_389 = torch.add(onnx__Add_387, self._vars["onnx__Add_388"])
    onnx__Div_390 = torch.sqrt(onnx__Sqrt_389)
    onnx__Mul_391 = torch.div(onnx__Pow_384, onnx__Div_390)
    onnx__Add_392 = torch.mul(onnx__Mul_391, self._vars["stages_1_2_norm_weight"])
    input0_19 = torch.add(onnx__Add_392, self._vars["stages_1_2_norm_bias"])
    onnx__Add_395 = torch.matmul(input0_19, self._vars["onnx__MatMul_875"])
    input_47 = torch.add(self._vars["stages_1_2_pwconv1_bias"], onnx__Add_395)
    onnx__Div_397 = self._vars['onnx__Div_397']
    onnx__Erf_398 = torch.div(input_47, self._vars["onnx__Div_397"])
    onnx__Add_399 = torch.erf(onnx__Erf_398)
    onnx__Add_400 = self._vars['onnx__Add_400']
    onnx__Mul_401 = torch.add(onnx__Add_399, self._vars["onnx__Add_400"])
    onnx__Mul_402 = torch.mul(input_47, onnx__Mul_401)
    onnx__Mul_403 = self._vars['onnx__Mul_403']
    onnx__MatMul_404 = torch.mul(onnx__Mul_402, self._vars["onnx__Mul_403"])
    onnx__Add_406 = torch.matmul(onnx__MatMul_404, self._vars["onnx__MatMul_876"])
    x_72 = torch.add(self._vars["stages_1_2_pwconv2_bias"], onnx__Add_406)
    x_76 = torch.mul(self._vars["stages_1_2_gamma"], x_72)
    x0_23 = x_76.permute(*[0, 3, 1, 2])
    onnx__ReduceMean_410 = torch.add(onnx__Conv_380, x0_23)
    u_7 = torch.mean(onnx__ReduceMean_410, [1], **{'keepdim': True})
    onnx__Pow_412 = torch.sub(onnx__ReduceMean_410, u_7)
    onnx__Pow_413 = self._vars['onnx__Pow_413']
    onnx__ReduceMean_414 = torch.pow(onnx__Pow_412, self._vars["onnx__Pow_413"])
    s_7 = torch.mean(onnx__ReduceMean_414, [1], **{'keepdim': True})
    onnx__Add_416 = self._vars['onnx__Add_416']
    onnx__Sqrt_417 = torch.add(s_7, self._vars["onnx__Add_416"])
    onnx__Div_418 = torch.sqrt(onnx__Sqrt_417)
    x_80 = torch.div(onnx__Pow_412, onnx__Div_418)
    onnx__Add_424 = torch.mul(self._vars["onnx__Mul_878"], x_80)
    onnx__Conv_429 = torch.add(onnx__Add_424, self._vars["onnx__Add_880"])
    input_51 = self.n_Conv_205(onnx__Conv_429)
    x_84 = self.n_Conv_206(input_51)
    input_55 = x_84.permute(*[0, 2, 3, 1])
    onnx__Sub_433 = torch.mean(input_55, [-1], **{'keepdim': True})
    onnx__Pow_434 = torch.sub(input_55, onnx__Sub_433)
    onnx__Pow_435 = self._vars['onnx__Pow_435']
    onnx__ReduceMean_436 = torch.pow(onnx__Pow_434, self._vars["onnx__Pow_435"])
    onnx__Add_437 = torch.mean(onnx__ReduceMean_436, [-1], **{'keepdim': True})
    onnx__Add_438 = self._vars['onnx__Add_438']
    onnx__Sqrt_439 = torch.add(onnx__Add_437, self._vars["onnx__Add_438"])
    onnx__Div_440 = torch.sqrt(onnx__Sqrt_439)
    onnx__Mul_441 = torch.div(onnx__Pow_434, onnx__Div_440)
    onnx__Add_442 = torch.mul(onnx__Mul_441, self._vars["stages_2_0_norm_weight"])
    input0_23 = torch.add(onnx__Add_442, self._vars["stages_2_0_norm_bias"])
    onnx__Add_445 = torch.matmul(input0_23, self._vars["onnx__MatMul_881"])
    input_59 = torch.add(self._vars["stages_2_0_pwconv1_bias"], onnx__Add_445)
    onnx__Div_447 = self._vars['onnx__Div_447']
    onnx__Erf_448 = torch.div(input_59, self._vars["onnx__Div_447"])
    onnx__Add_449 = torch.erf(onnx__Erf_448)
    onnx__Add_450 = self._vars['onnx__Add_450']
    onnx__Mul_451 = torch.add(onnx__Add_449, self._vars["onnx__Add_450"])
    onnx__Mul_452 = torch.mul(input_59, onnx__Mul_451)
    onnx__Mul_453 = self._vars['onnx__Mul_453']
    onnx__MatMul_454 = torch.mul(onnx__Mul_452, self._vars["onnx__Mul_453"])
    onnx__Add_456 = torch.matmul(onnx__MatMul_454, self._vars["onnx__MatMul_882"])
    x_88 = torch.add(self._vars["stages_2_0_pwconv2_bias"], onnx__Add_456)
    x_92 = torch.mul(self._vars["stages_2_0_gamma"], x_88)
    x0_27 = x_92.permute(*[0, 3, 1, 2])
    onnx__Conv_460 = torch.add(input_51, x0_27)
    x_96 = self.n_Conv_234(onnx__Conv_460)
    input_63 = x_96.permute(*[0, 2, 3, 1])
    onnx__Sub_463 = torch.mean(input_63, [-1], **{'keepdim': True})
    onnx__Pow_464 = torch.sub(input_63, onnx__Sub_463)
    onnx__Pow_465 = self._vars['onnx__Pow_465']
    onnx__ReduceMean_466 = torch.pow(onnx__Pow_464, self._vars["onnx__Pow_465"])
    onnx__Add_467 = torch.mean(onnx__ReduceMean_466, [-1], **{'keepdim': True})
    onnx__Add_468 = self._vars['onnx__Add_468']
    onnx__Sqrt_469 = torch.add(onnx__Add_467, self._vars["onnx__Add_468"])
    onnx__Div_470 = torch.sqrt(onnx__Sqrt_469)
    onnx__Mul_471 = torch.div(onnx__Pow_464, onnx__Div_470)
    onnx__Add_472 = torch.mul(onnx__Mul_471, self._vars["stages_2_1_norm_weight"])
    input0_27 = torch.add(onnx__Add_472, self._vars["stages_2_1_norm_bias"])
    onnx__Add_475 = torch.matmul(input0_27, self._vars["onnx__MatMul_883"])
    input_67 = torch.add(self._vars["stages_2_1_pwconv1_bias"], onnx__Add_475)
    onnx__Div_477 = self._vars['onnx__Div_477']
    onnx__Erf_478 = torch.div(input_67, self._vars["onnx__Div_477"])
    onnx__Add_479 = torch.erf(onnx__Erf_478)
    onnx__Add_480 = self._vars['onnx__Add_480']
    onnx__Mul_481 = torch.add(onnx__Add_479, self._vars["onnx__Add_480"])
    onnx__Mul_482 = torch.mul(input_67, onnx__Mul_481)
    onnx__Mul_483 = self._vars['onnx__Mul_483']
    onnx__MatMul_484 = torch.mul(onnx__Mul_482, self._vars["onnx__Mul_483"])
    onnx__Add_486 = torch.matmul(onnx__MatMul_484, self._vars["onnx__MatMul_884"])
    x_100 = torch.add(self._vars["stages_2_1_pwconv2_bias"], onnx__Add_486)
    x_104 = torch.mul(self._vars["stages_2_1_gamma"], x_100)
    x0_31 = x_104.permute(*[0, 3, 1, 2])
    onnx__Conv_490 = torch.add(onnx__Conv_460, x0_31)
    x_108 = self.n_Conv_262(onnx__Conv_490)
    input_71 = x_108.permute(*[0, 2, 3, 1])
    onnx__Sub_493 = torch.mean(input_71, [-1], **{'keepdim': True})
    onnx__Pow_494 = torch.sub(input_71, onnx__Sub_493)
    onnx__Pow_495 = self._vars['onnx__Pow_495']
    onnx__ReduceMean_496 = torch.pow(onnx__Pow_494, self._vars["onnx__Pow_495"])
    onnx__Add_497 = torch.mean(onnx__ReduceMean_496, [-1], **{'keepdim': True})
    onnx__Add_498 = self._vars['onnx__Add_498']
    onnx__Sqrt_499 = torch.add(onnx__Add_497, self._vars["onnx__Add_498"])
    onnx__Div_500 = torch.sqrt(onnx__Sqrt_499)
    onnx__Mul_501 = torch.div(onnx__Pow_494, onnx__Div_500)
    onnx__Add_502 = torch.mul(onnx__Mul_501, self._vars["stages_2_2_norm_weight"])
    input0_31 = torch.add(onnx__Add_502, self._vars["stages_2_2_norm_bias"])
    onnx__Add_505 = torch.matmul(input0_31, self._vars["onnx__MatMul_885"])
    input_75 = torch.add(self._vars["stages_2_2_pwconv1_bias"], onnx__Add_505)
    onnx__Div_507 = self._vars['onnx__Div_507']
    onnx__Erf_508 = torch.div(input_75, self._vars["onnx__Div_507"])
    onnx__Add_509 = torch.erf(onnx__Erf_508)
    onnx__Add_510 = self._vars['onnx__Add_510']
    onnx__Mul_511 = torch.add(onnx__Add_509, self._vars["onnx__Add_510"])
    onnx__Mul_512 = torch.mul(input_75, onnx__Mul_511)
    onnx__Mul_513 = self._vars['onnx__Mul_513']
    onnx__MatMul_514 = torch.mul(onnx__Mul_512, self._vars["onnx__Mul_513"])
    onnx__Add_516 = torch.matmul(onnx__MatMul_514, self._vars["onnx__MatMul_886"])
    x_112 = torch.add(self._vars["stages_2_2_pwconv2_bias"], onnx__Add_516)
    x_116 = torch.mul(self._vars["stages_2_2_gamma"], x_112)
    x0_35 = x_116.permute(*[0, 3, 1, 2])
    onnx__Conv_520 = torch.add(onnx__Conv_490, x0_35)
    x_120 = self.n_Conv_290(onnx__Conv_520)
    input_79 = x_120.permute(*[0, 2, 3, 1])
    onnx__Sub_523 = torch.mean(input_79, [-1], **{'keepdim': True})
    onnx__Pow_524 = torch.sub(input_79, onnx__Sub_523)
    onnx__Pow_525 = self._vars['onnx__Pow_525']
    onnx__ReduceMean_526 = torch.pow(onnx__Pow_524, self._vars["onnx__Pow_525"])
    onnx__Add_527 = torch.mean(onnx__ReduceMean_526, [-1], **{'keepdim': True})
    onnx__Add_528 = self._vars['onnx__Add_528']
    onnx__Sqrt_529 = torch.add(onnx__Add_527, self._vars["onnx__Add_528"])
    onnx__Div_530 = torch.sqrt(onnx__Sqrt_529)
    onnx__Mul_531 = torch.div(onnx__Pow_524, onnx__Div_530)
    onnx__Add_532 = torch.mul(onnx__Mul_531, self._vars["stages_2_3_norm_weight"])
    input0_35 = torch.add(onnx__Add_532, self._vars["stages_2_3_norm_bias"])
    onnx__Add_535 = torch.matmul(input0_35, self._vars["onnx__MatMul_887"])
    input_83 = torch.add(self._vars["stages_2_3_pwconv1_bias"], onnx__Add_535)
    onnx__Div_537 = self._vars['onnx__Div_537']
    onnx__Erf_538 = torch.div(input_83, self._vars["onnx__Div_537"])
    onnx__Add_539 = torch.erf(onnx__Erf_538)
    onnx__Add_540 = self._vars['onnx__Add_540']
    onnx__Mul_541 = torch.add(onnx__Add_539, self._vars["onnx__Add_540"])
    onnx__Mul_542 = torch.mul(input_83, onnx__Mul_541)
    onnx__Mul_543 = self._vars['onnx__Mul_543']
    onnx__MatMul_544 = torch.mul(onnx__Mul_542, self._vars["onnx__Mul_543"])
    onnx__Add_546 = torch.matmul(onnx__MatMul_544, self._vars["onnx__MatMul_888"])
    x_124 = torch.add(self._vars["stages_2_3_pwconv2_bias"], onnx__Add_546)
    x_128 = torch.mul(self._vars["stages_2_3_gamma"], x_124)
    x0_39 = x_128.permute(*[0, 3, 1, 2])
    onnx__Conv_550 = torch.add(onnx__Conv_520, x0_39)
    x_132 = self.n_Conv_318(onnx__Conv_550)
    input_87 = x_132.permute(*[0, 2, 3, 1])
    onnx__Sub_553 = torch.mean(input_87, [-1], **{'keepdim': True})
    onnx__Pow_554 = torch.sub(input_87, onnx__Sub_553)
    onnx__Pow_555 = self._vars['onnx__Pow_555']
    onnx__ReduceMean_556 = torch.pow(onnx__Pow_554, self._vars["onnx__Pow_555"])
    onnx__Add_557 = torch.mean(onnx__ReduceMean_556, [-1], **{'keepdim': True})
    onnx__Add_558 = self._vars['onnx__Add_558']
    onnx__Sqrt_559 = torch.add(onnx__Add_557, self._vars["onnx__Add_558"])
    onnx__Div_560 = torch.sqrt(onnx__Sqrt_559)
    onnx__Mul_561 = torch.div(onnx__Pow_554, onnx__Div_560)
    onnx__Add_562 = torch.mul(onnx__Mul_561, self._vars["stages_2_4_norm_weight"])
    input0_39 = torch.add(onnx__Add_562, self._vars["stages_2_4_norm_bias"])
    onnx__Add_565 = torch.matmul(input0_39, self._vars["onnx__MatMul_889"])
    input_91 = torch.add(self._vars["stages_2_4_pwconv1_bias"], onnx__Add_565)
    onnx__Div_567 = self._vars['onnx__Div_567']
    onnx__Erf_568 = torch.div(input_91, self._vars["onnx__Div_567"])
    onnx__Add_569 = torch.erf(onnx__Erf_568)
    onnx__Add_570 = self._vars['onnx__Add_570']
    onnx__Mul_571 = torch.add(onnx__Add_569, self._vars["onnx__Add_570"])
    onnx__Mul_572 = torch.mul(input_91, onnx__Mul_571)
    onnx__Mul_573 = self._vars['onnx__Mul_573']
    onnx__MatMul_574 = torch.mul(onnx__Mul_572, self._vars["onnx__Mul_573"])
    onnx__Add_576 = torch.matmul(onnx__MatMul_574, self._vars["onnx__MatMul_890"])
    x_136 = torch.add(self._vars["stages_2_4_pwconv2_bias"], onnx__Add_576)
    x_140 = torch.mul(self._vars["stages_2_4_gamma"], x_136)
    x0_43 = x_140.permute(*[0, 3, 1, 2])
    onnx__Conv_580 = torch.add(onnx__Conv_550, x0_43)
    x_144 = self.n_Conv_346(onnx__Conv_580)
    input_95 = x_144.permute(*[0, 2, 3, 1])
    onnx__Sub_583 = torch.mean(input_95, [-1], **{'keepdim': True})
    onnx__Pow_584 = torch.sub(input_95, onnx__Sub_583)
    onnx__Pow_585 = self._vars['onnx__Pow_585']
    onnx__ReduceMean_586 = torch.pow(onnx__Pow_584, self._vars["onnx__Pow_585"])
    onnx__Add_587 = torch.mean(onnx__ReduceMean_586, [-1], **{'keepdim': True})
    onnx__Add_588 = self._vars['onnx__Add_588']
    onnx__Sqrt_589 = torch.add(onnx__Add_587, self._vars["onnx__Add_588"])
    onnx__Div_590 = torch.sqrt(onnx__Sqrt_589)
    onnx__Mul_591 = torch.div(onnx__Pow_584, onnx__Div_590)
    onnx__Add_592 = torch.mul(onnx__Mul_591, self._vars["stages_2_5_norm_weight"])
    input0_43 = torch.add(onnx__Add_592, self._vars["stages_2_5_norm_bias"])
    onnx__Add_595 = torch.matmul(input0_43, self._vars["onnx__MatMul_891"])
    input_99 = torch.add(self._vars["stages_2_5_pwconv1_bias"], onnx__Add_595)
    onnx__Div_597 = self._vars['onnx__Div_597']
    onnx__Erf_598 = torch.div(input_99, self._vars["onnx__Div_597"])
    onnx__Add_599 = torch.erf(onnx__Erf_598)
    onnx__Add_600 = self._vars['onnx__Add_600']
    onnx__Mul_601 = torch.add(onnx__Add_599, self._vars["onnx__Add_600"])
    onnx__Mul_602 = torch.mul(input_99, onnx__Mul_601)
    onnx__Mul_603 = self._vars['onnx__Mul_603']
    onnx__MatMul_604 = torch.mul(onnx__Mul_602, self._vars["onnx__Mul_603"])
    onnx__Add_606 = torch.matmul(onnx__MatMul_604, self._vars["onnx__MatMul_892"])
    x_148 = torch.add(self._vars["stages_2_5_pwconv2_bias"], onnx__Add_606)
    x_152 = torch.mul(self._vars["stages_2_5_gamma"], x_148)
    x0_47 = x_152.permute(*[0, 3, 1, 2])
    onnx__Conv_610 = torch.add(onnx__Conv_580, x0_47)
    x_156 = self.n_Conv_374(onnx__Conv_610)
    input_103 = x_156.permute(*[0, 2, 3, 1])
    onnx__Sub_613 = torch.mean(input_103, [-1], **{'keepdim': True})
    onnx__Pow_614 = torch.sub(input_103, onnx__Sub_613)
    onnx__Pow_615 = self._vars['onnx__Pow_615']
    onnx__ReduceMean_616 = torch.pow(onnx__Pow_614, self._vars["onnx__Pow_615"])
    onnx__Add_617 = torch.mean(onnx__ReduceMean_616, [-1], **{'keepdim': True})
    onnx__Add_618 = self._vars['onnx__Add_618']
    onnx__Sqrt_619 = torch.add(onnx__Add_617, self._vars["onnx__Add_618"])
    onnx__Div_620 = torch.sqrt(onnx__Sqrt_619)
    onnx__Mul_621 = torch.div(onnx__Pow_614, onnx__Div_620)
    onnx__Add_622 = torch.mul(onnx__Mul_621, self._vars["stages_2_6_norm_weight"])
    input0_47 = torch.add(onnx__Add_622, self._vars["stages_2_6_norm_bias"])
    onnx__Add_625 = torch.matmul(input0_47, self._vars["onnx__MatMul_893"])
    input_107 = torch.add(self._vars["stages_2_6_pwconv1_bias"], onnx__Add_625)
    onnx__Div_627 = self._vars['onnx__Div_627']
    onnx__Erf_628 = torch.div(input_107, self._vars["onnx__Div_627"])
    onnx__Add_629 = torch.erf(onnx__Erf_628)
    onnx__Add_630 = self._vars['onnx__Add_630']
    onnx__Mul_631 = torch.add(onnx__Add_629, self._vars["onnx__Add_630"])
    onnx__Mul_632 = torch.mul(input_107, onnx__Mul_631)
    onnx__Mul_633 = self._vars['onnx__Mul_633']
    onnx__MatMul_634 = torch.mul(onnx__Mul_632, self._vars["onnx__Mul_633"])
    onnx__Add_636 = torch.matmul(onnx__MatMul_634, self._vars["onnx__MatMul_894"])
    x_160 = torch.add(self._vars["stages_2_6_pwconv2_bias"], onnx__Add_636)
    x_164 = torch.mul(self._vars["stages_2_6_gamma"], x_160)
    x0_51 = x_164.permute(*[0, 3, 1, 2])
    onnx__Conv_640 = torch.add(onnx__Conv_610, x0_51)
    x_168 = self.n_Conv_402(onnx__Conv_640)
    input_111 = x_168.permute(*[0, 2, 3, 1])
    onnx__Sub_643 = torch.mean(input_111, [-1], **{'keepdim': True})
    onnx__Pow_644 = torch.sub(input_111, onnx__Sub_643)
    onnx__Pow_645 = self._vars['onnx__Pow_645']
    onnx__ReduceMean_646 = torch.pow(onnx__Pow_644, self._vars["onnx__Pow_645"])
    onnx__Add_647 = torch.mean(onnx__ReduceMean_646, [-1], **{'keepdim': True})
    onnx__Add_648 = self._vars['onnx__Add_648']
    onnx__Sqrt_649 = torch.add(onnx__Add_647, self._vars["onnx__Add_648"])
    onnx__Div_650 = torch.sqrt(onnx__Sqrt_649)
    onnx__Mul_651 = torch.div(onnx__Pow_644, onnx__Div_650)
    onnx__Add_652 = torch.mul(onnx__Mul_651, self._vars["stages_2_7_norm_weight"])
    input0_51 = torch.add(onnx__Add_652, self._vars["stages_2_7_norm_bias"])
    onnx__Add_655 = torch.matmul(input0_51, self._vars["onnx__MatMul_895"])
    input_115 = torch.add(self._vars["stages_2_7_pwconv1_bias"], onnx__Add_655)
    onnx__Div_657 = self._vars['onnx__Div_657']
    onnx__Erf_658 = torch.div(input_115, self._vars["onnx__Div_657"])
    onnx__Add_659 = torch.erf(onnx__Erf_658)
    onnx__Add_660 = self._vars['onnx__Add_660']
    onnx__Mul_661 = torch.add(onnx__Add_659, self._vars["onnx__Add_660"])
    onnx__Mul_662 = torch.mul(input_115, onnx__Mul_661)
    onnx__Mul_663 = self._vars['onnx__Mul_663']
    onnx__MatMul_664 = torch.mul(onnx__Mul_662, self._vars["onnx__Mul_663"])
    onnx__Add_666 = torch.matmul(onnx__MatMul_664, self._vars["onnx__MatMul_896"])
    x_172 = torch.add(self._vars["stages_2_7_pwconv2_bias"], onnx__Add_666)
    x_176 = torch.mul(self._vars["stages_2_7_gamma"], x_172)
    x0_55 = x_176.permute(*[0, 3, 1, 2])
    onnx__Conv_670 = torch.add(onnx__Conv_640, x0_55)
    x_180 = self.n_Conv_430(onnx__Conv_670)
    input_119 = x_180.permute(*[0, 2, 3, 1])
    onnx__Sub_673 = torch.mean(input_119, [-1], **{'keepdim': True})
    onnx__Pow_674 = torch.sub(input_119, onnx__Sub_673)
    onnx__Pow_675 = self._vars['onnx__Pow_675']
    onnx__ReduceMean_676 = torch.pow(onnx__Pow_674, self._vars["onnx__Pow_675"])
    onnx__Add_677 = torch.mean(onnx__ReduceMean_676, [-1], **{'keepdim': True})
    onnx__Add_678 = self._vars['onnx__Add_678']
    onnx__Sqrt_679 = torch.add(onnx__Add_677, self._vars["onnx__Add_678"])
    onnx__Div_680 = torch.sqrt(onnx__Sqrt_679)
    onnx__Mul_681 = torch.div(onnx__Pow_674, onnx__Div_680)
    onnx__Add_682 = torch.mul(onnx__Mul_681, self._vars["stages_2_8_norm_weight"])
    input0_55 = torch.add(onnx__Add_682, self._vars["stages_2_8_norm_bias"])
    onnx__Add_685 = torch.matmul(input0_55, self._vars["onnx__MatMul_897"])
    input_123 = torch.add(self._vars["stages_2_8_pwconv1_bias"], onnx__Add_685)
    onnx__Div_687 = self._vars['onnx__Div_687']
    onnx__Erf_688 = torch.div(input_123, self._vars["onnx__Div_687"])
    onnx__Add_689 = torch.erf(onnx__Erf_688)
    onnx__Add_690 = self._vars['onnx__Add_690']
    onnx__Mul_691 = torch.add(onnx__Add_689, self._vars["onnx__Add_690"])
    onnx__Mul_692 = torch.mul(input_123, onnx__Mul_691)
    onnx__Mul_693 = self._vars['onnx__Mul_693']
    onnx__MatMul_694 = torch.mul(onnx__Mul_692, self._vars["onnx__Mul_693"])
    onnx__Add_696 = torch.matmul(onnx__MatMul_694, self._vars["onnx__MatMul_898"])
    x_184 = torch.add(self._vars["stages_2_8_pwconv2_bias"], onnx__Add_696)
    x_188 = torch.mul(self._vars["stages_2_8_gamma"], x_184)
    x0_59 = x_188.permute(*[0, 3, 1, 2])
    onnx__ReduceMean_700 = torch.add(onnx__Conv_670, x0_59)
    input1 = torch.mean(onnx__ReduceMean_700, [-2, -1], **{'keepdim': False})
    onnx__Sub_702 = torch.mean(input1, [-1], **{'keepdim': True})
    onnx__Pow_703 = torch.sub(input1, onnx__Sub_702)
    onnx__Pow_704 = self._vars['onnx__Pow_704']
    onnx__ReduceMean_705 = torch.pow(onnx__Pow_703, self._vars["onnx__Pow_704"])
    onnx__Add_706 = torch.mean(onnx__ReduceMean_705, [-1], **{'keepdim': True})
    onnx__Add_707 = self._vars['onnx__Add_707']
    onnx__Sqrt_708 = torch.add(onnx__Add_706, self._vars["onnx__Add_707"])
    onnx__Div_709 = torch.sqrt(onnx__Sqrt_708)
    onnx__Mul_710 = torch.div(onnx__Pow_703, onnx__Div_709)
    onnx__Add_711 = torch.mul(onnx__Mul_710, self._vars["norm_s3_weight"])
    onnx__Concat_712 = torch.add(onnx__Add_711, self._vars["norm_s3_bias"])
    u_11 = torch.mean(onnx__ReduceMean_700, [1], **{'keepdim': True})
    onnx__Pow_714 = torch.sub(onnx__ReduceMean_700, u_11)
    onnx__Pow_715 = self._vars['onnx__Pow_715']
    onnx__ReduceMean_716 = torch.pow(onnx__Pow_714, self._vars["onnx__Pow_715"])
    s_11 = torch.mean(onnx__ReduceMean_716, [1], **{'keepdim': True})
    onnx__Add_718 = self._vars['onnx__Add_718']
    onnx__Sqrt_719 = torch.add(s_11, self._vars["onnx__Add_718"])
    onnx__Div_720 = torch.sqrt(onnx__Sqrt_719)
    x_192 = torch.div(onnx__Pow_714, onnx__Div_720)
    onnx__Add_726 = torch.mul(self._vars["onnx__Mul_900"], x_192)
    onnx__Conv_731 = torch.add(onnx__Add_726, self._vars["onnx__Add_902"])
    input_127 = self.n_Conv_481(onnx__Conv_731)
    x_196 = self.n_Conv_482(input_127)
    input_131 = x_196.permute(*[0, 2, 3, 1])
    onnx__Sub_735 = torch.mean(input_131, [-1], **{'keepdim': True})
    onnx__Pow_736 = torch.sub(input_131, onnx__Sub_735)
    onnx__Pow_737 = self._vars['onnx__Pow_737']
    onnx__ReduceMean_738 = torch.pow(onnx__Pow_736, self._vars["onnx__Pow_737"])
    onnx__Add_739 = torch.mean(onnx__ReduceMean_738, [-1], **{'keepdim': True})
    onnx__Add_740 = self._vars['onnx__Add_740']
    onnx__Sqrt_741 = torch.add(onnx__Add_739, self._vars["onnx__Add_740"])
    onnx__Div_742 = torch.sqrt(onnx__Sqrt_741)
    onnx__Mul_743 = torch.div(onnx__Pow_736, onnx__Div_742)
    onnx__Add_744 = torch.mul(onnx__Mul_743, self._vars["stages_3_0_norm_weight"])
    input0_59 = torch.add(onnx__Add_744, self._vars["stages_3_0_norm_bias"])
    onnx__Add_747 = torch.matmul(input0_59, self._vars["onnx__MatMul_903"])
    input_135 = torch.add(self._vars["stages_3_0_pwconv1_bias"], onnx__Add_747)
    onnx__Div_749 = self._vars['onnx__Div_749']
    onnx__Erf_750 = torch.div(input_135, self._vars["onnx__Div_749"])
    onnx__Add_751 = torch.erf(onnx__Erf_750)
    onnx__Add_752 = self._vars['onnx__Add_752']
    onnx__Mul_753 = torch.add(onnx__Add_751, self._vars["onnx__Add_752"])
    onnx__Mul_754 = torch.mul(input_135, onnx__Mul_753)
    onnx__Mul_755 = self._vars['onnx__Mul_755']
    onnx__MatMul_756 = torch.mul(onnx__Mul_754, self._vars["onnx__Mul_755"])
    onnx__Add_758 = torch.matmul(onnx__MatMul_756, self._vars["onnx__MatMul_904"])
    x_200 = torch.add(self._vars["stages_3_0_pwconv2_bias"], onnx__Add_758)
    x_204 = torch.mul(self._vars["stages_3_0_gamma"], x_200)
    x0_63 = x_204.permute(*[0, 3, 1, 2])
    onnx__Conv_762 = torch.add(input_127, x0_63)
    x_208 = self.n_Conv_510(onnx__Conv_762)
    input_139 = x_208.permute(*[0, 2, 3, 1])
    onnx__Sub_765 = torch.mean(input_139, [-1], **{'keepdim': True})
    onnx__Pow_766 = torch.sub(input_139, onnx__Sub_765)
    onnx__Pow_767 = self._vars['onnx__Pow_767']
    onnx__ReduceMean_768 = torch.pow(onnx__Pow_766, self._vars["onnx__Pow_767"])
    onnx__Add_769 = torch.mean(onnx__ReduceMean_768, [-1], **{'keepdim': True})
    onnx__Add_770 = self._vars['onnx__Add_770']
    onnx__Sqrt_771 = torch.add(onnx__Add_769, self._vars["onnx__Add_770"])
    onnx__Div_772 = torch.sqrt(onnx__Sqrt_771)
    onnx__Mul_773 = torch.div(onnx__Pow_766, onnx__Div_772)
    onnx__Add_774 = torch.mul(onnx__Mul_773, self._vars["stages_3_1_norm_weight"])
    input0_63 = torch.add(onnx__Add_774, self._vars["stages_3_1_norm_bias"])
    onnx__Add_777 = torch.matmul(input0_63, self._vars["onnx__MatMul_905"])
    input_143 = torch.add(self._vars["stages_3_1_pwconv1_bias"], onnx__Add_777)
    onnx__Div_779 = self._vars['onnx__Div_779']
    onnx__Erf_780 = torch.div(input_143, self._vars["onnx__Div_779"])
    onnx__Add_781 = torch.erf(onnx__Erf_780)
    onnx__Add_782 = self._vars['onnx__Add_782']
    onnx__Mul_783 = torch.add(onnx__Add_781, self._vars["onnx__Add_782"])
    onnx__Mul_784 = torch.mul(input_143, onnx__Mul_783)
    onnx__Mul_785 = self._vars['onnx__Mul_785']
    onnx__MatMul_786 = torch.mul(onnx__Mul_784, self._vars["onnx__Mul_785"])
    onnx__Add_788 = torch.matmul(onnx__MatMul_786, self._vars["onnx__MatMul_906"])
    x_212 = torch.add(self._vars["stages_3_1_pwconv2_bias"], onnx__Add_788)
    x_216 = torch.mul(self._vars["stages_3_1_gamma"], x_212)
    x0_67 = x_216.permute(*[0, 3, 1, 2])
    onnx__Conv_792 = torch.add(onnx__Conv_762, x0_67)
    x_220 = self.n_Conv_538(onnx__Conv_792)
    input_147 = x_220.permute(*[0, 2, 3, 1])
    onnx__Sub_795 = torch.mean(input_147, [-1], **{'keepdim': True})
    onnx__Pow_796 = torch.sub(input_147, onnx__Sub_795)
    onnx__Pow_797 = self._vars['onnx__Pow_797']
    onnx__ReduceMean_798 = torch.pow(onnx__Pow_796, self._vars["onnx__Pow_797"])
    onnx__Add_799 = torch.mean(onnx__ReduceMean_798, [-1], **{'keepdim': True})
    onnx__Add_800 = self._vars['onnx__Add_800']
    onnx__Sqrt_801 = torch.add(onnx__Add_799, self._vars["onnx__Add_800"])
    onnx__Div_802 = torch.sqrt(onnx__Sqrt_801)
    onnx__Mul_803 = torch.div(onnx__Pow_796, onnx__Div_802)
    onnx__Add_804 = torch.mul(onnx__Mul_803, self._vars["stages_3_2_norm_weight"])
    input0_67 = torch.add(onnx__Add_804, self._vars["stages_3_2_norm_bias"])
    onnx__Add_807 = torch.matmul(input0_67, self._vars["onnx__MatMul_907"])
    input_151 = torch.add(self._vars["stages_3_2_pwconv1_bias"], onnx__Add_807)
    onnx__Div_809 = self._vars['onnx__Div_809']
    onnx__Erf_810 = torch.div(input_151, self._vars["onnx__Div_809"])
    onnx__Add_811 = torch.erf(onnx__Erf_810)
    onnx__Add_812 = self._vars['onnx__Add_812']
    onnx__Mul_813 = torch.add(onnx__Add_811, self._vars["onnx__Add_812"])
    onnx__Mul_814 = torch.mul(input_151, onnx__Mul_813)
    onnx__Mul_815 = self._vars['onnx__Mul_815']
    onnx__MatMul_816 = torch.mul(onnx__Mul_814, self._vars["onnx__Mul_815"])
    onnx__Add_818 = torch.matmul(onnx__MatMul_816, self._vars["onnx__MatMul_908"])
    x_224 = torch.add(self._vars["stages_3_2_pwconv2_bias"], onnx__Add_818)
    x_228 = torch.mul(self._vars["stages_3_2_gamma"], x_224)
    x0_71 = x_228.permute(*[0, 3, 1, 2])
    onnx__ReduceMean_822 = torch.add(onnx__Conv_792, x0_71)
    input2 = torch.mean(onnx__ReduceMean_822, [-2, -1], **{'keepdim': False})
    onnx__Sub_824 = torch.mean(input2, [-1], **{'keepdim': True})
    onnx__Pow_825 = torch.sub(input2, onnx__Sub_824)
    onnx__Pow_826 = self._vars['onnx__Pow_826']
    onnx__ReduceMean_827 = torch.pow(onnx__Pow_825, self._vars["onnx__Pow_826"])
    onnx__Add_828 = torch.mean(onnx__ReduceMean_827, [-1], **{'keepdim': True})
    onnx__Add_829 = self._vars['onnx__Add_829']
    onnx__Sqrt_830 = torch.add(onnx__Add_828, self._vars["onnx__Add_829"])
    onnx__Div_831 = torch.sqrt(onnx__Sqrt_830)
    onnx__Mul_832 = torch.div(onnx__Pow_825, onnx__Div_831)
    onnx__Add_833 = torch.mul(onnx__Mul_832, self._vars["norm_weight"])
    input0_71 = torch.add(onnx__Add_833, self._vars["norm_bias"])
    coeff = 1.0 * torch.matmul(input0_71, torch.transpose(self._vars["fc_coeff_weight"], 0, 1)) + 1.0 * self._vars["fc_coeff_bias"]
    output = torch.reshape(coeff, [int(s) if s != 0 else coeff.shape[i] for i, s in enumerate(self._vars["onnx__Reshape_911"])])
    lmk = 1.0 * torch.matmul(input0_71, torch.transpose(self._vars["fc_lmk_weight"], 0, 1)) + 1.0 * self._vars["fc_lmk_bias"]
    t_853 = torch.reshape(lmk, [int(s) if s != 0 else lmk.shape[i] for i, s in enumerate(onnx__Reshape_914)])
    input3 = torch.cat((onnx__Concat_712, input0_71), **{'dim': 1})
    onnx__Reshape_855 = 1.0 * torch.matmul(input3, torch.transpose(self._vars["fc_pts_weight"], 0, 1)) + 1.0 * self._vars["fc_pts_bias"]
    t_856 = torch.reshape(onnx__Reshape_855, [int(s) if s != 0 else onnx__Reshape_855.shape[i] for i, s in enumerate(onnx__Reshape_917)])
    return output, t_853, t_856